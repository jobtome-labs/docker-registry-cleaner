include:
  - remote: 'https://raw.githubusercontent.com/jobtome-labs/ci-templates/v2.30.14/templates/docker.yml'

stages:
  - build-cache
  - build
  - upload
  - deploy
  - stop

variables:
  FF_GITLAB_REGISTRY_HELPER_IMAGE: "1" # https://docs.gitlab.com/runner/configuration/advanced-configuration.html#migrate-helper-image-to-registrygitlabcom

.tpl:only:mr_master_and_tags:
  only:
    - merge_requests
    - master
    - tags

build:cleaner:builder:
  extends:
    - .docker:build:multi:base
    - .tpl:only:mr_master_and_tags
  stage: build-cache
  variables:
    BUILD_TARGET: builder
    IMAGE_TAG_SUFFIX: builder

build:cleaner:main:
  extends:
    - .docker:build:multi:base
    - .tpl:only:mr_master_and_tags
  stage: build
  variables:
    CACHE_FROM: builder
    BUILD_TARGET: main

build:cleaner:minimal:
  extends:
    - .docker:build:multi:base
    - .tpl:only:mr_master_and_tags
  stage: build
  variables:
    CACHE_FROM: builder
    BUILD_TARGET: minimal
    IMAGE_TAG_SUFFIX: minimal

release:
  stage: deploy
  image: docker:20.10.5
  services:
    - docker:20.10-dind
  before_script:
    - apk add --no-cache curl
    - curl --location --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - echo "Wait for Docker daemon at tcp://localhost:2375"
    - while ! nc -z localhost 2375; do sleep 0.1; done # Wait until docker socket is available
  script:
    - |
      echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - |
      docker run -v "$(pwd)":/opt/mount --rm --entrypoint cp $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-builder cleaner /opt/mount/
    - |
      LINUX_AMD64_BINARY=cleaner-linux-amd64-${CI_COMMIT_TAG}
      PACKAGE_REGISTRY_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/cleaner/${CI_COMMIT_TAG}
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file cleaner ${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${LINUX_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}\"}"
  artifacts:
    paths:
      - cleaner
    expire_in: 30 days
  only:
    - tags
  when: manual

# This stage is required to declare environment:on_stop, which will
# trigger the real clean up job. This is a workaround solution that
# allows us running a ci job after we merge the merge request.
# The environment created here is virtual and takes zero resources.
docker:image:cleanup:env:
  stage: deploy
  script: echo "env created"
  environment:
    name: docker/$CI_COMMIT_REF_NAME
    on_stop: docker:image:cleanup
  only:
    - merge_requests

docker:image:cleanup:
  stage: stop
  image: $CI_REGISTRY/auxiliary/docker-registry-cleaner:1.0.0
  variables:
    GITLAB_TOKEN_TYPE: job
    GITLAB_TOKEN: $CI_JOB_TOKEN
    GITLAB_API_V4_URL: $CI_API_V4_URL
    GITLAB_PROJECT_ID: $CI_PROJECT_ID
    GITLAB_REPOSITORY_NAME: $CI_COMMIT_REF_SLUG
    GIT_STRATEGY: none
  script:
    - cleaner clean
  when: manual
  environment:
    name: docker/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_requests
